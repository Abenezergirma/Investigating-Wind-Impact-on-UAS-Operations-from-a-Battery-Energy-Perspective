clear, clc;

headers = {'Trajectory Type', 'Wind X', 'Wind Y', 'Motor Affected', 'Full Loss', 'Partial Loss', 'Turbulence', 'Saturation RPM', 'Mean TTE', 'Sum TTE', 'Max TTE', 'Median TTE', 'Std TTE', 'TTF', 'TTC', 'Completed', 'TOC', 'Cross Corridor', 'Variance'};
results = []; % store the results of the experiments here

trajtype = 'square';
windtype = 1;
turbenabled=0;

if windtype==0
    smallestwind=0;
    largestwind=0;
elseif windtype==1
    smallestwind=0;
    largestwind=5;
elseif windtype==2
    smallestwind=5;
    largestwind=10;
elseif windtype==3
    smallestwind=10;
    largestwind=15;
else
    error('Wind type not implemented!');
end

windx=smallestwind + (largestwind-smallestwind)*rand;
windy=smallestwind + (largestwind-smallestwind)*rand;
windz=0;

disp(['Wind X: ', num2str(windx), ' Y: ', num2str(windy), ' m/s.'])

% To have complete motor failure of motor i, set i of this list to 0. 
% To have partial motor failure, set to the scaling factor.
% Ex: 0.75 is 25% failure.
motormults=[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0];

% To have saturation, set the motormult to 0.
% This will be added to the 
% Pick between 0 and 5500
saturationrpms=[0,0,0,0,0,0,0,0];

partial_percents = [0.9, 0.75, 0.5];
saturation_nums = [1000, 2500, 5500];

for fault_idx = 1:57

    

    is_full_loss = 0;
    partial_percent = 0; 
    saturation_num = 0;

    if fault_idx == 1
        motor_idx = nan;
    else 
        motor_idx = mod(fault_idx+6, 8)+1;
    end 

    motormult = motormults(:);
    saturationrpm=saturationrpms(:);

    if (fault_idx - 1 < 9) && ~(fault_idx == 1)
        motormult(motor_idx)=0;
        is_full_loss = 1;
    elseif fault_idx - 1 < 33 && ~(fault_idx == 1)
        partial_percent=partial_percents(mod(fault_idx,3)+1);
        motormult(motor_idx)=partial_percent;
    elseif ~(fault_idx == 1)
        saturation_num = saturation_nums(mod(fault_idx,3)+1);
        motormult(motor_idx)=0;
        saturationrpm(motor_idx)=saturation_num;
    end

    has_turbulence =  0;
       
    trajtype=datasample({'square', 'triangle'}, 1, 'Replace', true);

    % load UAV parameters, map and trajectories
    octomodel=load('params/TarotT18.mat').octomodel;
    Motor=load('params/KDE4213XF-360_performancedata.mat').Motor;
    battery=load('params/battery_Tattu.mat').battery;
    windspecs=load('params/TarotT18_windspecs.mat').windspecs;

    if strcmp(trajtype, 'nasa')
        load missionplanner/waypoints1.mat ; 
        load missionplanner/waypointsorign1.mat ; 
        xyzENU = lla2enu(waypoints,waypointsorign,'flat');
        xyzref=xyzENU(2:end,:);
        xyzic=xyzENU(1,:);
        xyzic(3)=waypointsorign(3);
    elseif strcmp(trajtype, 'square')
        load missionplanner/zeroorigin.mat ;
        load missionplanner/squareref.mat ; 
    elseif strcmp(trajtype, 'triangle')
        load missionplanner/zeroorigin.mat ;
        load missionplanner/triangleref.mat ;
    else
        error('Trajectory type not implemented');
    end
    
    % trajectory settings/ mission plan / initial conditions
    
    % mission velocity cruise speed, desired and max
    maxleashvelocity=5; % in m/s  SHOULD NOT BE LARGER THAN 7 M/S FOR NOW
    
    save('missionplanner/xyzic.mat','xyzic');
    save('missionplanner/xyzref.mat','xyzref');
    
    
    
    %define initial conditions for the vehicle
    IC= load('params/initialcond/IC_HoverAt30mOcto.mat').IC;
    IC.X=xyzic(1);
    IC.Y=xyzic(2);
    IC.Z=xyzic(3);
    
    % time required to complete the whole mission, currently using this for
    % every waypoint, should refine for each waypoint
    waypoints=xyzref(:,1:2);
    totaldistancei = calculatedistance(waypoints);
    timeinterval = calculatetime(totaldistancei,maxleashvelocity);
    stoptimetotal=timeinterval(2)+0.25*timeinterval(2);
    
    % time travel between waypoints
    waypoints=xyzref;
    nWayPoints = length(waypoints);
    
    % Calculate the distance between waypoints
    % currently unused, could be used to estimate max time to complete each
    % waypoint trajectory
    distance = zeros(1,nWayPoints);
    for i = 2:nWayPoints
        distance(i) = norm(waypoints(i,1:3) - waypoints(i-1,1:3));
    end
    
    
    % trapezoidal velocity trajectory generator parameters
    maxVelocity=5; % m/s
    numsamples=100;
    
    % simulate flight from waypoint to waypoint
    
    % variables initialization
    postraj=[];
    alttraj=[];
    veltraj=[];
    atttraj=[];
    rpmtraj=[];
    refpostraj=[];
    batvartraj=[];
    trajerror=[]; % track trajectory error
    
    prevwaypt=xyzic(1,1:2);
    
    for waypts=1:length(xyzref)
        currentwaypt=xyzref(waypts,1:2);
        % read next waypoint
        xref=xyzref(waypts,1);
        yref=xyzref(waypts,2);
        zref=xyzref(waypts,3);
    
        % define trapezoidal velocity profile
        tempwayp=[IC.X,IC.Y;xyzref(waypts,1:2)]';
        [endTimes,peakVels] = ProfileForMaxVel(tempwayp,maxVelocity);
        [q, qd, qdd, tvec, pp] = trapveltraj(tempwayp, numsamples,EndTime=endTimes);
        velprofileX=qd(1,:)';
        velprofileY=qd(2,:)';
        scurvetimes=tvec';
        
        % simulate until reaching next waypoint
        try
            out=sim('dynamicsquat');
        catch exception
            disp('Simulation failure');
            disp(exception);
            % TODO: Find out how to get the time here
        end
    
        % obtain simulation data
        pos=state.Data(:,1:2);
        alt=state.Data(:,3);
        vel=state.Data(:,4:6);
        att=state.Data(:,7:9);
        rpm=motorsrpm.Data(:,1:8);
        refpos=refposition.Data(:,1:2);
        batvar=battery_data.Data(:,1:3);
        trajer=zeros(size(refpos, 1), 1);
    
        % Calculate trajectory tracking error at each timestep
        % Need to separate this into a function soon
        for i = 1:size(pos, 1)
            point_vector = pos(i, :) - prevwaypt;
            vector = currentwaypt - prevwaypt;
            cross_product = cross([vector, 0], [point_vector, 0]);
            trajer(i) = abs(cross_product(3)) / norm(vector);
        end
    
        prevwaypt=currentwaypt;
    
        % save variables
         postraj=[postraj;pos];
         alttraj=[alttraj;alt];
         veltraj=[veltraj;vel];
         atttraj=[atttraj;att];
         rpmtraj=[rpmtraj;rpm];
         refpostraj=[refpostraj;refpos];
         batvartraj=[batvartraj;batvar];
         trajerror=[trajerror;trajer];
    
        %reset initial conditions to start from last simulation step
        [IC,battery] = resetinitial(IC,battery,state.Data,battery_variables.Data);
    end
    
    %create time vector
    time=0:octomodel.sampletime:(length(postraj)-1)*octomodel.sampletime;
    timeb=0:battery.sampleTime:(length(batvartraj)-1)*battery.sampleTime;
    
    % Display time to complete
    disp(['Time to complete: ', num2str(time(end))])
    
    % obtain current results
    totali=batvartraj(:,1);
    voltage=batvartraj(:,2);
    SOC=batvartraj(:,3);
    
    completed = missionCompleted(postraj, currentwaypt);
    disp(['Mission completed: ', num2str(completed)])
    
    if ~completed
        ttf=time(end);
    else
        ttf=nan;
    end

    disp(['Time to failure: ', num2str(ttf)]);
    last_idx=size(postraj,1);
    if ttf>0
        last_idx=int32(ttf*100);
    end

    [mean_err,sum_err,max_err,median_err,std_err] = trajTrackingStats(trajerror, last_idx);
    disp('Mean traj. tracking error:');
    disp(mean_err);
    
    disp('Sum tte');
    disp(sum_err);
    
    disp('Max tte');
    disp(max_err);
    
    disp('Median tte');
    disp(median_err);
    
    disp('Std tte');
    disp(std_err);
    
    toc = timeOutsideCorridor(trajerror, last_idx);
    disp(['Total time outside corridor: ', num2str(toc)]);
    
    num_crossings = numCrossCorridor(trajerror, last_idx);
    disp(['Crossed corridor ', num2str(num_crossings), ' times.']);
    
    jitter = calculateDisplacementVariance(postraj, last_idx);
    disp(['Jitteriness: ', num2str(jitter)]);

    if completed
        ttc = time(end);
    else
        ttc = nan;
    end 

%{'Trajectory Type', 'Wind X', 'Wind Y', 'Motor Affected', 'Full Loss', 'Partial Loss', 'Turbulence', 'Saturation RPM', 'Mean TTE', 'Sum TTE', 'Max TTE', 'Median TTE', 'Std TTE', 'TTF', 'TTC', 'Completed', 'TOC', 'Cross Corridor', 'Variance'};
    curr_results = {trajtype, windx, windy, motor_idx, is_full_loss, partial_percent, has_turbulence, saturation_num, mean_err, sum_err, max_err, median_err, std_err, ttf, ttc, completed, toc, num_crossings, jitter};
    results=[results;curr_results];

end

results_table = array2table(results, 'VariableNames', headers);
writetable(results_table, 'experiment_results.csv', 'Delimiter', ',');

function [mean_err,sum_err,max_err,median_err,std_err] = trajTrackingStats(err, last_idx)
    mean_err = mean(err(1:last_idx));
    sum_err = sum(err(1:last_idx));
    max_err = max(err(1:last_idx));
    median_err = median(err(1:last_idx));
    std_err = std(err(1:last_idx));
end

function completed = missionCompleted(postraj, finalwaypt)
    dist = norm(postraj(end, :) - finalwaypt);
    if dist <= 2.01
        completed = 1;
    else
        completed = 0;
    end
end

function toc = timeOutsideCorridor(trajerror, last_idx)
    err = trajerror(1:last_idx);
    outside_corridor = find(err > 2);
    toc = length(outside_corridor) * 0.01;
end

function crossings = numCrossCorridor(trajerror, last_idx)
    crossings = 0;
    
    for i = 1:length(trajerror(1:last_idx))-1
        if (trajerror(i) < 2 && trajerror(i+1) >= 2)
            crossings = crossings + 1;
        end
    end
end

% Need to revisit this
function jitteriness = calculateDisplacementVariance(postraj, last_idx)
    dx = diff(postraj(1:last_idx, 1));
    dy = diff(postraj(1:last_idx, 2));

    jitteriness=var([dx; dy]);
end

